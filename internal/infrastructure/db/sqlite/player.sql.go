// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: player.sql

package sqlite

import (
	"context"
)

const createPlayer = `-- name: CreatePlayer :one
INSERT INTO player (id, nickname, elo_rating)
VALUES (?, ?, ?)
RETURNING id, nickname, elo_rating, created_at, updated_at, active
`

type CreatePlayerParams struct {
	ID        string
	Nickname  string
	EloRating int64
}

func (q *Queries) CreatePlayer(ctx context.Context, arg CreatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, createPlayer, arg.ID, arg.Nickname, arg.EloRating)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.EloRating,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Active,
	)
	return i, err
}

const deletePlayer = `-- name: DeletePlayer :exec
DELETE FROM player
WHERE id = ?
`

func (q *Queries) DeletePlayer(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deletePlayer, id)
	return err
}

const findAllPlayers = `-- name: FindAllPlayers :many
SELECT id, nickname, elo_rating, created_at, updated_at, active FROM player
WHERE active = 1
ORDER BY elo_rating DESC
`

func (q *Queries) FindAllPlayers(ctx context.Context) ([]Player, error) {
	rows, err := q.db.QueryContext(ctx, findAllPlayers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Player
	for rows.Next() {
		var i Player
		if err := rows.Scan(
			&i.ID,
			&i.Nickname,
			&i.EloRating,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findPlayerByID = `-- name: FindPlayerByID :one
SELECT id, nickname, elo_rating, created_at, updated_at, active FROM player
WHERE id = ? LIMIT 1
`

func (q *Queries) FindPlayerByID(ctx context.Context, id string) (Player, error) {
	row := q.db.QueryRowContext(ctx, findPlayerByID, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.EloRating,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Active,
	)
	return i, err
}

const findPlayerByNickname = `-- name: FindPlayerByNickname :one
SELECT id, nickname, elo_rating, created_at, updated_at, active FROM player
WHERE nickname = ? COLLATE NOCASE LIMIT 1
`

func (q *Queries) FindPlayerByNickname(ctx context.Context, nickname string) (Player, error) {
	row := q.db.QueryRowContext(ctx, findPlayerByNickname, nickname)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.EloRating,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Active,
	)
	return i, err
}

const untrackPlayer = `-- name: UntrackPlayer :one
UPDATE player
SET active = 0
WHERE id = ?
RETURNING id, nickname, elo_rating, created_at, updated_at, active
`

func (q *Queries) UntrackPlayer(ctx context.Context, id string) (Player, error) {
	row := q.db.QueryRowContext(ctx, untrackPlayer, id)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.EloRating,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Active,
	)
	return i, err
}

const updatePlayer = `-- name: UpdatePlayer :one
UPDATE player
SET nickname = ?, elo_rating = ?, active = ?
WHERE id = ?
RETURNING id, nickname, elo_rating, created_at, updated_at, active
`

type UpdatePlayerParams struct {
	Nickname  string
	EloRating int64
	Active    int64
	ID        string
}

func (q *Queries) UpdatePlayer(ctx context.Context, arg UpdatePlayerParams) (Player, error) {
	row := q.db.QueryRowContext(ctx, updatePlayer,
		arg.Nickname,
		arg.EloRating,
		arg.Active,
		arg.ID,
	)
	var i Player
	err := row.Scan(
		&i.ID,
		&i.Nickname,
		&i.EloRating,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Active,
	)
	return i, err
}
